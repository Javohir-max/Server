import bcrypt from "bcryptjs";
import User from "../models/User.js";
import { supabase } from "../supabase.js";


// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
export const update = async (req, res) => {
    // —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—é–¥–∞
    try {
        const user = await User.findById(req.user.id);
        if (!user) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        const { name, email, password } = req.body;

        // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if (name) user.name = name;
        if (email) user.email = email;
        if (password) {
        user.password = await bcrypt.hash(password, 10);
        }

        // ‚ö°Ô∏è –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
        if (req.file) {
        // —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if (user.imageName) {
            await supabase.storage.from(process.env.S3_BUCKET_ONE).remove([user.imageName]);
        }

        const fileName = `${process.env.S3_BUCKET_ONE}/${Date.now()}-${req.file.originalname}`;
        const { error } = await supabase.storage
            .from(process.env.S3_BUCKET_ONE)
            .upload(fileName, req.file.buffer, { contentType: req.file.mimetype });
        if (error) throw error;

        const { data: publicUrl } = supabase.storage
            .from(process.env.S3_BUCKET_ONE)
            .getPublicUrl(fileName);

        user.avatar = publicUrl.publicUrl;
        user.imageName = fileName;
        }

        await user.save();

        res.json({ msg: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω", user });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" });
    }
};

// –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
export const all = async (req, res) => {
    // —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—é–¥–∞
    try {
        const users = await User.find().select("-password -refreshToken");
        res.json(users);
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
    }
};

// –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
export const delet = async (req, res) => {
    // —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å—é–¥–∞
    try {
        const user = await User.findById(req.user.id);

        if (!user) {
        return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // üìÇ –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ Supabase
        if (user.imageName) {
        const filePath = user.imageName;

        const { error } = await Supabase.storage
            .from(process.env.S3_BUCKET_ONE) // –∏–º—è bucket-–∞
            .remove([filePath]);

        if (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Supabase:", error.message);
        } else {
            console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ Supabase");
        }
        }

        // ‚ùå –£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–∑ MongoDB
        await User.findByIdAndDelete(req.user.id);

        res.json({ msg: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω—ã" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};