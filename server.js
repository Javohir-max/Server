import express from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";
import cors from "cors";
import nodemailer from "nodemailer"
import multer from "multer";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { supabase } from "./supabase.js";

import User from "./models/User.js";
import Post from "./models/Post.js";

dotenv.config();

const app = express();
app.use(express.json());
app.use(cors({ origin: "http://localhost:3000", credentials: true }));

// multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å
const storage = multer.memoryStorage();
const upload = multer({ storage });

// üîë middleware
function authMiddleware(req, res, next) {
  const token = req.headers["authorization"]?.split(" ")[1];
  if (!token) return res.status(401).json({ msg: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ msg: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    req.user = user;
    next();
  });
}

// ‚ö°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
const transporter = nodemailer.createTransport({
  service: "gmail", // –º–æ–∂–Ω–æ "yandex", "mail.ru", "smtp.mailgun.org"
  auth: {
    user: process.env.EMAIL_USER, // —Ç–≤–æ—è –ø–æ—á—Ç–∞
    pass: process.env.EMAIL_PASS  // –ø–∞—Ä–æ–ª—å –∏–ª–∏ app-password
  }
})

function generateTokens(user) {
  const accessToken = jwt.sign(
    { id: user._id },
    process.env.JWT_SECRET
  );

  const refreshToken = jwt.sign(
    { id: user._id },
    process.env.JWT_REFRESH_SECRET, // –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
    { expiresIn: "30d" } // –∂–∏–≤–µ—Ç 30 –¥–Ω–µ–π
  );

  return { accessToken, refreshToken };
}

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
app.post("/api/auth/register", upload.single("avatar"), async (req, res) => {
  try {
    const { name, email, password, date } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    let avatarUrl = null;
    let imgName = null;
    if (req.file) {
      const fileName = `${process.env.S3_BUCKET_ONE}/${Date.now()}-${req.file.originalname}`;
      const { error } = await supabase.storage
        .from(process.env.S3_BUCKET_ONE) // –∏–º—è bucket-–∞
        .upload(fileName, req.file.buffer, { contentType: req.file.mimetype });
      if (error) throw error;

      const { data: publicUrl } = supabase.storage.from(process.env.S3_BUCKET_ONE).getPublicUrl(fileName);
      avatarUrl = publicUrl.publicUrl;
      imgName = fileName
    }
    

    const newUser = new User({ name, email, password: hashedPassword, avatar: avatarUrl, imageName: imgName, date });
    await newUser.save();

    res.json({ msg: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", user: newUser });
  } catch (err) {
    res.status(500).json({ msg: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", error: err.message });
  }
});

// üìå –õ–æ–≥–∏–Ω
app.post("/api/auth/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ msg: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ msg: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });

  const { accessToken, refreshToken } = generateTokens(user);

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º refresh –≤ –±–∞–∑–µ
  user.refreshToken = refreshToken;
  await user.save();

  res.json({ accessToken, refreshToken, user });
});

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ accessToken –ø–æ refreshToken
app.post("/api/auth/refresh", async (req, res) => {
  const { refreshToken } = req.body;
  if (!refreshToken) return res.status(401).json({ msg: "–ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞" });

  try {
    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);

    const user = await User.findById(decoded.id);
    if (!user || user.refreshToken !== refreshToken) {
      return res.status(403).json({ msg: "–ù–µ–≤–µ—Ä–Ω—ã–π refresh —Ç–æ–∫–µ–Ω" });
    }

    // –≥–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—ã–π accessToken
    const accessToken = jwt.sign(
      { id: user._id },
      process.env.JWT_SECRET,
      { expiresIn: "15m" }
    );

    res.json({ accessToken });
  } catch (err) {
    res.status(403).json({ msg: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π refresh" });
  }
});

// üìå –õ–æ–≥–∞—É—Ç
app.post("/api/auth/logout", authMiddleware, async (req, res) => {
  const user = await User.findById(req.user.id);
  if (user) {
    user.refreshToken = null; // —É–±–∏—Ä–∞–µ–º refresh
    await user.save();
  }
  res.json({ msg: "–í—ã –≤—ã—à–ª–∏" });
});

// üìå –ü—Ä–æ—Ñ–∏–ª—å
app.get("/api/auth/me", authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    if (!user) return res.status(404).json({ msg: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json(user);
  } catch (err) {
    res.status(500).json({ msg: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: err.message });
  }
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
app.put("/api/users/me", authMiddleware, upload.single("avatar"), async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const { name, email, password } = req.body;

    // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    if (name) user.name = name;
    if (email) user.email = email;
    if (password) {
      user.password = await bcrypt.hash(password, 10);
    }

    // ‚ö°Ô∏è –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
    if (req.file) {
      // —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å
      if (user.imageName) {
        await supabase.storage.from(process.env.S3_BUCKET_ONE).remove([user.imageName]);
      }

      const fileName = `${process.env.S3_BUCKET_ONE}/${Date.now()}-${req.file.originalname}`;
      const { error } = await supabase.storage
        .from(process.env.S3_BUCKET_ONE)
        .upload(fileName, req.file.buffer, { contentType: req.file.mimetype });
      if (error) throw error;

      const { data: publicUrl } = supabase.storage
        .from(process.env.S3_BUCKET_ONE)
        .getPublicUrl(fileName);

      user.avatar = publicUrl.publicUrl;
      user.imageName = fileName;
    }

    await user.save();

    res.json({ msg: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω", user });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" });
  }
});

// üìå –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
app.get("/api/users", authMiddleware, async (req, res) => {
  try {
    // const { email } = req.query;

    // let query = {};
    // if (email) {
    //   query.email = new RegExp(email, "i"); // –ø–æ–∏—Å–∫ –ø–æ email (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    // }

    const users = await User.find().select("-password -refreshToken");
    res.json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
  }
});

// üìå –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
app.post("/api/posts", authMiddleware, upload.single("image"), async (req, res) => {
  try {
    let imageUrl = null;
    let postName = null;
    if (req.file) {
      const fileName = `${process.env.S3_BUCKET_TWO}/${Date.now()}-${req.file.originalname}`;
      const { error } = await supabase.storage
        .from(process.env.S3_BUCKET_TWO)
        .upload(fileName, req.file.buffer, { contentType: req.file.mimetype });
      if (error) throw error;

      const { data: publicUrl } = supabase.storage.from(process.env.S3_BUCKET_TWO).getPublicUrl(fileName);
      imageUrl = publicUrl.publicUrl;
      postName = fileName
    }
    const newPost = new Post({ userId: req.user.id, title: req.body.title, image: imageUrl, postImgName: postName });
    await newPost.save();

    res.json({ msg: "–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω", post: newPost });
  } catch (err) {
    res.status(500).json({ msg: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞", error: err.message });
  }
});

// üìå –í—Å–µ –ø–æ—Å—Ç—ã
app.get("/api/posts", async (req, res) => {
  const posts = await Post.find().populate("userId", "name email avatar");
  res.json(posts);
});

app.get("/api/start", async (req, res) => {
  const response = {
    message: "Server is running",
    status: true
  };
  res.json(response);
});

// üì© –†–æ—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
app.post("/api/auth/reset-password", async (req, res) => {
    const { email } = req.body
    if (!email) {
        return res.status(400).json({ error: "–ü–æ—á—Ç—ã –Ω–µ—Ç!" })
    }
    const seccretCode = Math.floor(100000 + Math.random() * 900000) // —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ 6 —Ü–∏—Ñ—Ä
    const message = `–í–∞—à –∫–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${seccretCode}. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.`
    try {
        await transporter.sendMail({
            from: process.env.EMAIL_USER, 
            to: email,
            subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞",
            text: message
        })

        res.json({ msg: "‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É.", code: seccretCode })
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err)
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞" })
    }
})

// üìå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
app.delete("/api/users/me", authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üìÇ –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ Supabase
    if (user.imageName) {
      const filePath = user.imageName;

      const { error } = await supabase.storage
        .from(process.env.S3_BUCKET_ONE) // –∏–º—è bucket-–∞
        .remove([filePath]);

      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Supabase:", error.message);
      } else {
        console.log("‚úÖ –ê–≤–∞—Ç–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ Supabase");
      }
    }

    // ‚ùå –£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–∑ MongoDB
    await User.findByIdAndDelete(req.user.id);

    res.json({ msg: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∞–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω—ã" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üöÄ Mongo + —Å–µ—Ä–≤–µ—Ä
mongoose.connect(process.env.MONGO_URI)
  .then(() => {
    console.log("‚úÖ MongoDB connected");
    app.listen(process.env.PORT, () => console.log(`üöÄ Server running on port ${process.env.PORT}`));
  })
  .catch(err => console.error("‚ùå MongoDB error:", err));
